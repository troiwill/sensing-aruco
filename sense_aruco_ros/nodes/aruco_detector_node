#!/usr/bin/env python3

from sense_aruco.detector import ArucoDetector
from sense_aruco_ros.msg import Marker, MarkerArray, MarkerPose, MarkerPoseArray
from cv_bridge import CvBridge
from geometry_msgs.msg import Pose
import rospy
from scipy.spatial.transform import Rotation as R
from sensor_msgs.msg import Image


class ArucoDetectorNode:

    def __init__(self, paramfilepath, family_name, marker_side_len):
        self.cvbridge = CvBridge()

        # Set up the marker estimator.
        self.marker_estimator = ArucoDetector(
            paramfilepath=paramfilepath, family_name=family_name,
            marker_side_len=marker_side_len)

        # Determines if the node will publish Marker or MarkerPose arrays.
        self.__detect_only = False
        if self.marker_estimator.K is None or self.marker_estimator.D is None:
            self.__detect_only = True
    #end def

    def rcvd_image_callback(self, image_msg):
        """
        Callback function used to estimate the marker pose and predicted
        uncertainty.
        """
        def build_marker_msg(detection):
            msg = Marker()

            msg.mid = detection["mid"].item()
            msg.corners = detection["corners"].flatten().tolist()
            return msg

        def build_pose_msg(pose_estimate):
            msg = Pose()

            tx, ty, tz = pose_estimate['tvec'].flatten()
            msg.position.x = tx
            msg.position.y = ty
            msg.position.z = tz

            rotations = R.from_rotvec(
                pose_estimate['rvec'].flatten())
            qx, qy, qz, qw = rotations.as_quat()
            msg.orientation.x = qx
            msg.orientation.y = qy
            msg.orientation.z = qz
            msg.orientation.w = qw

            return msg
            
        # Convert the color image to a CV image, and then get the data.
        cv_image = self.cvbridge.imgmsg_to_cv2(image_msg,
            desired_encoding='bgr8')

        # Perform pose estimation on the detected markers.
        detections = self.marker_estimator.detect(cv_image)
        pose_estimates = self.marker_estimator.estimate_pose(
            detections)

        # If we want to estimate the pose and no poses were computed, return None.
        if self.__detect_only == False and (pose_estimates is None or len(pose_estimates) == 0):
            return None

        # Extract the detection/pose information and publish the messages.
        msg_array = self.__MSG_ARRAY_TYPE()
        msg_array.header = image_msg.header
        for i in range(len(detections)):
            # Gather the marker information.
            marker_msg = build_marker_msg(detections[i])

            # Gather the marker pose information if required.
            if self.__detect_only == False:
                pose_msg = build_pose_msg(pose_estimates[i])
                msg = MarkerPose()
                
                msg.detection = marker_msg
                msg.pose = pose_msg
                msg_array.markers.append(msg)

            else:
                msg_array.detections.append(marker_msg)
                
        self.__msg_pub.publish(msg_array)

        return None
    #end def

    def setup_node(self, camera_image_sub_topic, pose_publisher_topic,
        queue_len):
        self.camera_image_sub = rospy.Subscriber(
            camera_image_sub_topic, Image, callback=self.rcvd_image_callback)

        if self.__detect_only == True:
            self.__MSG_ARRAY_TYPE = MarkerArray

        else:
            self.__MSG_ARRAY_TYPE = MarkerPoseArray

        self.__msg_pub = rospy.Publisher(pose_publisher_topic,
            self.__MSG_ARRAY_TYPE, queue_size=queue_len)
    #end def
#end class


if __name__ == '__main__':
    queue_len = 60
    rospy.init_node("aruco_pose_estimator", anonymous=True)
    
    # Configure the node with parameters.
    paramfilepath = rospy.get_param("/camera_intrinsics_file")
    family_name = rospy.get_param("/familyname")
    marker_side_len = rospy.get_param("/marker_len")
    image_sub_topic = rospy.get_param("/image_topic")
    publisher_topic = rospy.get_param("/aruco_msg_topic", "/aruco_markers")

    # Create the estimator node and run.
    aruco_estimator_node = ArucoDetectorNode(paramfilepath=paramfilepath,
        family_name=family_name, marker_side_len=marker_side_len)
    aruco_estimator_node.setup_node(image_sub_topic, publisher_topic, queue_len)
    
    rospy.spin()
#end if
